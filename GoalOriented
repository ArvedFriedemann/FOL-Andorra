Goal Oriented Reasoning

Especially in the presence of universal quantifiers, it is unreasonable for some tasks to always unwrap all possible assignments for the variables. In fact, even when the consistency of a formula is queried, there might be shortcuts that don't need everything evaluated. Therefore, the problem to be evaluated is: Is a given fact true in a certain context? Where the context is given by an (incomplete) conjunction.

When given a goal, being a term that should hold, it is first checked whether it is either already in the context or whether it can be deduced by an implication. If there are several implications, they are disjuncted. Once an implication is chosen, all premises are checked to hold.
Furthermore, as the goal is assumed to hold, it triggers propagations in the database. If one of these propagations causes a conflict, the goal is known not to hold unless the context is inconsistent.  All these propagations are, again disjuncted. It is like searching for the goal of a conflict existing. The steps of finding a conflict are again disjuncted with the list of possible steps. If the andorra principle is now continued, steps should only be taken when it is unique what to do. But imagine an explicit id being stated somewhere. It would always be a possibility, never cause a conflict and would be an absolute pointless path to take. There are two reason why it would be pointless: First, no new facts are deduced, so the search definitely did not progress. Second, and following from that, not using the rule would have in any case sped up the search. So, there are good reasons the id and similar terms should be removed from disjunctions about what to do next.
The disjunctions can be further reduced with complexity information. If the information is available that a certain branch will lead to a shorter path to a goal than another one, the slower branch can be removed. All this information needs to be in the context of the disjunction, possibly deduced by standard andorra. But could even this propagation be optional? Technically yes. In the absence of information, eventually some path needs to be chosen with the possibility to backtrack. Evaluating the search context might be a good idea, but could lead to slower search if used too eagerly. Now, literally any step our program can make is in a big disjunction and nothing gets evaluated. Great. How to escape this?


If in a state nothing would be clear to evaluate it is definitely chosen at random. Evaluating one fact though can transform the state. New knowledge means that branches can vanish or backtracking might need to be called. In any case, propagating a single fact one step is an atomic action. When being super finegrained it is already not really clear what that means. Assigning memory is straight forward, but already propagating that assignment might not be reasonable. The general idea is to have a deterministic algorithm that, as soon as there is a proof on what to do next, this action is executed. Only when that proof does not exist yet it is (backtracking safe) chosen at random. So, things are not necessarily just a big disjunction, but there might be variables of what needs to be evaluated. These things are definitely evaluated, with a fair strategy. What about statements like "this needs to be evaluated eventually"? technically, randomness should deal with that. 
